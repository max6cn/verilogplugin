/*
 * (C) Copyright  2014 Aplus Logic Inc (http://www.apluslogicinc.com/)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *      XR.M
 */
{
  // psiImplUtilClass="com.verilogplugin.util.VerilogPsiImplUtil"
  parserClass="com.verilogplugin.parser.VerilogParser"
  // parserUtilClass="com.verilogplugin.parser.VerilogParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Verilog"
  psiImplClassSuffix="Impl"
  psiPackage="com.verilogplugin.psi"
  psiImplPackage="com.verilogplugin.psi.impl"

  elementTypeHolderClass="com.verilogplugin.psi.VerilogTokenTypes"
  elementTypePrefix = ""
  elementTypeClass="com.verilogplugin.psi.VerilogElementType"
  tokenTypeClass="com.verilogplugin.psi.VerilogElementType"
  tokenTypeClass="com.verilogplugin.psi.VerilogTokenTypes"
  psiImplUtilClass="com.verilogplugin.psi.impl.VerilogPsiImplUtil"

  generateFirstCheck=50
/**
 * Tokens
 * http://hackage.haskell.org/package/verilog-0.0.2/docs/Language-Verilog-Tokens.html
 * http://hackage.haskell.org/package/verilog-0.0.2/docs/src/Language-Verilog-Parse.html
*/
  tokens = [

//      Id_simple                 = "regexp:[a-zA-Z_][a-zA-Z0-9_\$]*"
//      Id_system                 = "regexp:\$[a-zA-Z0-9_\$] [a-zA-Z0-9_\$]*"
//      Lit_number_unsigned       ="regexp:\d\+"
//      Lit_number                ="regexp:-\d\+"
//      Lit_string                = "regexp:\"[^\r\n]*\""
      ALIAS                  = "alias"
      ALWAYS                 = "always"
      ALWAYS_COMB            = "always_comb"
      ALWAYS_FF              = "always_ff"
      ALWAYS_LATCH           = "always_latch"
      AND                    = "and"
      ASSERT                 = "assert"
      ASSIGN                 = "assign"
      ASSUME                 = "assume"
      AUTOMATIC              = "automatic"
      BEFORE                 = "before"
      BEGIN                  = "begin"
      BIND                   = "bind"
      BINS                   = "bins"
      BINSOF                 = "binsof"
      BIT                    = "bit"
      BREAK                  = "break"
      BUF                    = "buf"
      BUFIF0                 = "bufif0"
      BUFIF1                 = "bufif1"
      BYTE                   = "byte"
      CASE                   = "case"
      CASEX                  = "casex"
      CASEZ                  = "casez"
      CELL                   = "cell"
      CHANDLE                = "chandle"
      CLASS                  = "class"
      CLOCKING               = "clocking"
      CMOS                   = "cmos"
      CONFIG                 = "config"
      CONST                  = "const"
      CONSTRAINT             = "constraint"
      CONTEXT                = "context"
      CONTINUE               = "continue"
      COVER                  = "cover"
      COVERGROUP             = "covergroup"
      COVERPOINT             = "coverpoint"
      CROSS                  = "cross"
      DEASSIGN               = "deassign"
      DEFAULT                = "default"
      DEFPARAM               = "defparam"
      DESIGN                 = "design"
      DISABLE                = "disable"
      DIST                   = "dist"
      DO                     = "do"
      EDGE                   = "edge"
      ELSE                   = "else"
      END                    = "end"
      ENDCASE                = "endcase"
      ENDCLASS               = "endclass"
      ENDCLOCKING            = "endclocking"
      ENDCONFIG              = "endconfig"
      ENDFUNCTION            = "endfunction"
      ENDGENERATE            = "endgenerate"
      ENDGROUP               = "endgroup"
      ENDINTERFACE           = "endinterface"
      ENDMODULE              = "endmodule"
      ENDPACKAGE             = "endpackage"
      ENDPRIMITIVE           = "endprimitive"
      ENDPROGRAM             = "endprogram"
      ENDPROPERTY            = "endproperty"
      ENDSPECIFY             = "endspecify"
      ENDSEQUENCE            = "endsequence"
      ENDTABLE               = "endtable"
      ENDTASK                = "endtask"
      ENUM                   = "enum"
      EVENT                  = "event"
      EXPECT                 = "expect"
      EXPORT                 = "export"
      EXTENDS                = "extends"
      EXTERN                 = "extern"
      FINAL                  = "final"
      FIRST_MATCH            = "first_match"
      FOR                    = "for"
      FORCE                  = "force"
      FOREACH                = "foreach"
      FOREVER                = "forever"
      FORK                   = "fork"
      FORKJOIN               = "forkjoin"
      FUNCTION               = "function"
      FUNCTION_PROTOTYPE     = "function_prototype"
      GENERATE               = "generate"
      GENVAR                 = "genvar"
      HIGHZ0                 = "highz0"
      HIGHZ1                 = "highz1"
      IF                     = "if"
      IFF                    = "iff"
      IFNONE                 = "ifnone"
      IGNORE_BINS            = "ignore_bins"
      ILLEGAL_BINS           = "illegal_bins"
      IMPORT                 = "import"
      INCDIR                 = "incdir"
      INCLUDE                = "include"
      INITIAL                = "initial"
      INOUT                  = "inout"
      INPUT                  = "input"
      INSIDE                 = "inside"
      INSTANCE               = "instance"
      INT                    = "int"
      INTEGER                = "integer"
      INTERFACE              = "interface"
      INTERSECT              = "intersect"
      JOIN                   = "join"
      JOIN_ANY               = "join_any"
      JOIN_NONE              = "join_none"
      LARGE                  = "large"
      LIBLIST                = "liblist"
      LIBRARY                = "library"
      LOCAL                  = "local"
      LOCALPARAM             = "localparam"
      LOGIC                  = "logic"
      LONGINT                = "longint"
      MACROMODULE            = "macromodule"
      MATCHES                = "matches"
      MEDIUM                 = "medium"
      MODPORT                = "modport"
      MODULE                 = "module"
      NAND                   = "nand"
      NEGEDGE                = "negedge"
      NEW                    = "new"
      NMOS                   = "nmos"
      NOR                    = "nor"
      NOSHOWCANCELLED        = "noshowcancelled"
      NOT                    = "not"
      NOTIF0                 = "notif0"
      NOTIF1                 = "notif1"
      NULL                   = "null"
      OPTION                 = "option"
      OR                     = "or"
      OUTPUT                 = "output"
      PACKAGE                = "package"
      PACKED                 = "packed"
      PARAMETER              = "parameter"
      PATHPULSE_DOLLAR       = "pathpulse_dollar"
      PMOS                   = "pmos"
      POSEDGE                = "posedge"
      PRIMITIVE              = "primitive"
      PRIORITY               = "priority"
      PROGRAM                = "program"
      PROPERTY               = "property"
      PROTECTED              = "protected"
      PULL0                  = "pull0"
      PULL1                  = "pull1"
      PULLDOWN               = "pulldown"
      PULLUP                 = "pullup"
      PULSESTYLE_ONEVENT     = "pulsestyle_onevent"
      PULSESTYLE_ONDETECT    = "pulsestyle_ondetect"
      PURE                   = "pure"
      RAND                   = "rand"
      RANDC                  = "randc"
      RANDCASE               = "randcase"
      RANDSEQUENCE           = "randsequence"
      RCMOS                  = "rcmos"
      REAL                   = "real"
      REALTIME               = "realtime"
      REF                    = "ref"
      REG                    = "reg"
      RELEASE                = "release"
      REPEAT                 = "repeat"
      RETURN                 = "return"
      RNMOS                  = "rnmos"
      RPMOS                  = "rpmos"
      RTRAN                  = "rtran"
      RTRANIF0               = "rtranif0"
      RTRANIF1               = "rtranif1"
      SCALARED               = "scalared"
      SEQUENCE               = "sequence"
      SHORTINT               = "shortint"
      SHORTREAL              = "shortreal"
      SHOWCANCELLED          = "showcancelled"
      SIGNED                 = "signed"
      SMALL                  = "small"
      SOLVE                  = "solve"
      SPECIFY                = "specify"
      SPECPARAM              = "specparam"
      STATIC                 = "static"
      STRENGTH0              = "strength0"
      STRENGTH1              = "strength1"
      STRING                 = "string"
      STRONG0                = "strong0"
      STRONG1                = "strong1"
      STRUCT                 = "struct"
      SUPER                  = "super"
      SUPPLY0                = "supply0"
      SUPPLY1                = "supply1"
      TABLE                  = "table"
      TAGGED                 = "tagged"
      TASK                   = "task"
      THIS                   = "this"
      THROUGHOUT             = "throughout"
      TIME                   = "time"
      TIMEPRECISION          = "timeprecision"
      TIMEUNIT               = "timeunit"
      TRAN                   = "tran"
      TRANIF0                = "tranif0"
      TRANIF1                = "tranif1"
      TRI                    = "tri"
      TRI0                   = "tri0"
      TRI1                   = "tri1"
      TRIAND                 = "triand"
      TRIOR                  = "trior"
      TRIREG                 = "trireg"
      TYPE                   = "type"
      TYPEDEF                = "typedef"
      TYPE_OPTION            = "type_option"
      UNION                  = "union"
      UNIQUE                 = "unique"
      UNSIGNED               = "unsigned"
      USE                    = "use"
      VAR                    = "var"
      VECTORED               = "vectored"
      VIRTUAL                = "virtual"
      VOID                   = "void"
      WAIT                   = "wait"
      WAIT_ORDER             = "wait_order"
      WAND                   = "wand"
      WEAK0                  = "weak0"
      WEAK1                  = "weak1"
      WHILE                  = "while"
      WILDCARD               = "wildcard"
      WIRE                   = "wire"
      WITH                   = "with"
      within                 = "within"
      WOR                    = "wor"
      XNOR                   = "xnor"
      XOR                    = "xor"

      PAREN_L               ="("
      PAREN_R               =")"
      BRACK_L               ="["
      BRACK_R               = "]"
      BRACE_L               = "{"
      BRACE_R               = "}"
      TILDY                 = "~"
      BANG                  = "!"
      AT                    = "@"
      POUND                 = "#"
      PERCENT               = "%"
      HAT                   = "^"
      AMP                   = "&"
      BAR                   = "|"
      ASTER                 = "*"
      DOT                   = "."
      COMMA                 = ","
      COLON                 = ":"
      SEMI                  = ";"
      EQ                    = "="
      LT                    = "<"
      GT                    = ">"
      PLUS                  = "+"
      DASH                  = "-"
      QUESTION              = "?"
      SLASH                 = "/"
      DOLLAR                = "$"
      S_QUOTE               = "'"
      TILDY_AMP             = "~&"
      TILDY_BAR             = "~|"
      TILDY_HAT             = "~^"
      HAT_TILDY             = "^~"
      EQ_EQ                 = "=="
      BANG_EQ               = "!="
      AMP_AMP               = "&&"
      BAR_BAR               = "||"
      ASTER_ASTER           = "**"
      LT_EQ                 = "<="
      GT_EQ                 = ">="
      GT_GT                 = ">>"
      LT_LT                 = "<<"
      PLUS_PLUS             = "++"
      DASH_DASH             = "--"
      PLUS_EQ               = "+="
      DASH_EQ               = "-="
      ASTER_EQ              = "*="
      SLASH_EQ              = "/="
      PERCENT_EQ            = "%="
      AMP_EQ                = "&="
      BAR_EQ                = "|="
      HAT_EQ                = "^="
      PLUS_COLON            = "+:"
      DASH_COLON            = "-:"
      COLON_COLON           = "::"
      DOT_ASTER             = ".*"
      DASH_GT               = "->"
      COLON_EQ              = ":="
      COLON_SLASH           = ":/"
      POUND_POUND           = "##"
      BRACK_L_ASTER         = "[*"
      BRACK_L_EQ            = "[="
      EQ_GT                 ="=>"
      AT_ASTER              = "@*"
      PAREN_L_ASTER         = "(*"
      ASTER_PAREN_R         = "*)"
      ASTER_GT              = "*>"
      EQ_EQ_EQ              = "==="
      BANG_EQ_EQ            = "!=="
      EQ_QUESTION_EQ        = "=?="
      BANG_QUESTION_EQ      = "!?="
      GT_GT_GT              = ">>>"
      LT_LT_LT              = "<<<"
      LT_LT_EQ              = "<<="
      GT_GT_EQ              = ">>="
      BAR_DASH_GT           = "|->"
      BAR_EQ_GT             = "|=>"
      BRACK_L_DASH_GT       = "[->"
      AT_AT_PAREN_L         = "@@("
      PAREN_L_ASTER_PAREN_R = "(*)"
      DASH_GT_GT            = "->>"
      AMP_AMP_AMP           = "&&&"
      LT_LT_LT_EQ           = "<<<="
      GT_GT_GT_EQ           = ">>>="
      ]
      // extends(".*Expression")="expression"
}

input  ::=  module input |  defattr input | /* empty */
attr   ::=  attr_opt
left  attr_opt  ::= attr_opt ATTR_BEGIN opt_attr_list ATTR_END |    /* empty */
defattr  ::= DEFATTR_BEGIN  opt_attr_list  DEFATTR_END;
opt_attr_list ::=   attr_list | /* empty */
left  attr_list ::= attr_assign |   attr_list ',' attr_assign;
attr_assign ::= hierarchical_id  |  hierarchical_id '=' expr
left  hierarchical_id ::=   TOK_ID  |   hierarchical_id '.' TOK_ID
module ::=  attr TOK_MODULE TOK_ID  module_para_opt module_args_opt ';' module_body TOK_ENDMODULE
module_para_opt ::= '#' '(' module_para_list ')' | /* empty */
module_para_list ::=    single_module_para |    single_module_para ',' module_para_list |   /* empty */
single_module_para ::=  TOK_PARAMETER  param_signed param_integer param_range single_param_decl
module_args_opt ::= '(' ')' | '(' module_args optional_comma ')' | /* empty */
left  module_args ::=   module_arg | module_args ',' module_arg
optional_comma ::=  ',' | /* empty */
module_arg_opt_assignment ::=   '=' expr  | /* empty */
module_arg ::=
    TOK_ID module_arg_opt_assignment |
    attr wire_type range TOK_ID module_arg_opt_assignment;
wire_type ::=    wire_type_token_list
left  wire_type_token_list  ::= wire_type_token | wire_type_token_list wire_type_token
wire_type_token ::= TOK_INPUT | TOK_OUTPUT  |   TOK_INOUT  |
    TOK_WIRE | TOK_REG | TOK_INTEGER |      TOK_GENVAR |    TOK_SIGNED
non_opt_range ::=
    '[' expr ':' expr ']' |
    '[' expr TOK_POS_INDEXED expr ']'  |
    '[' expr TOK_NEG_INDEXED expr ']'  |
    '[' expr ']'
range ::=   non_opt_range  |    /* empty */
range_or_integer ::=    range  |    TOK_INTEGER
left  module_body ::=   module_body module_body_stmt |  /* empty */
module_body_stmt ::=    task_func_decl | param_decl | localparam_decl | defparam_decl | wire_decl | assign_stmt
| cell_stmt |
    always_stmt | TOK_GENERATE module_gen_body TOK_ENDGENERATE | defattr | assert_
task_func_decl ::= TOK_TASK TOK_ID ';' task_func_body TOK_ENDTASK |
    TOK_FUNCTION opt_signed range_or_integer TOK_ID ';' task_func_body TOK_ENDFUNCTION
opt_signed ::=  TOK_SIGNED  |   /* empty */
left  task_func_body ::=    task_func_body behavioral_stmt |    /* empty */
param_signed ::=    TOK_SIGNED | /* empty */
param_integer ::=   TOK_INTEGER  | /* empty */
                                                                                            2
param_range ::= range ;
param_decl ::=  TOK_PARAMETER  param_signed param_integer param_range param_decl_list ';'
localparam_decl ::= TOK_LOCALPARAM  param_signed param_integer param_range param_decl_list ';'
left  param_decl_list ::=   single_param_decl | param_decl_list ',' single_param_decl
single_param_decl ::=   TOK_ID '=' expr
defparam_decl ::=   TOK_DEFPARAM defparam_decl_list ';'
left  defparam_decl_list ::=    single_defparam_decl | defparam_decl_list ',' single_defparam_decl
single_defparam_decl ::=    range hierarchical_id '=' expr
wire_decl ::=   attr wire_type range  wire_name_list ';'  | attr TOK_SUPPLY0 TOK_ID ';'  |
    attr TOK_SUPPLY1 TOK_ID ';'
left  wire_name_list ::=    wire_name_and_opt_assign | wire_name_list ',' wire_name_and_opt_assign
wire_name_and_opt_assign ::=    wire_name | wire_name '=' expr
wire_name ::=   TOK_ID range
assign_stmt ::= TOK_ASSIGN assign_expr_list ';';
left  assign_expr_list ::=  assign_expr | assign_expr_list ',' assign_expr;
assign_expr ::= expr '=' expr
cell_stmt ::=   attr TOK_ID  cell_parameter_list_opt cell_list ';'  |   attr tok_prim_wrapper  prim_list ';'
tok_prim_wrapper ::=    TOK_PRIMITIVE  |    TOK_OR
left  cell_list ::= single_cell |   cell_list ',' single_cell
single_cell ::= TOK_ID  '(' cell_port_list ')'
left  prim_list ::= single_prim |   prim_list ',' single_prim
single_prim ::= single_cell |   /* no name */ '(' cell_port_list ')'
cell_parameter_list_opt ::= '#' '(' cell_parameter_list ')' | /* empty */
cell_parameter_list ::=
    /* empty */ | cell_parameter |
    cell_parameter ',' cell_parameter_list;
cell_parameter ::=  expr  | '.' TOK_ID '(' expr ')'
cell_port_list ::=  cell_port | cell_port ',' cell_port_list |  /* empty */ ','  cell_port_list | /* empty */
cell_port ::=   expr |
    '.' TOK_ID '(' expr ')'  |
    '.' TOK_ID '(' ')'
always_stmt ::= attr TOK_ALWAYS always_cond   behavioral_stmt  |
    attr TOK_INITIAL behavioral_stmt
always_cond ::= '@' '(' always_events ')' |
    '@' '(' '*' ')' |
    '@' ATTR_BEGIN ')' |
    '@' '(' ATTR_END |
    '@' '*' |   /* empty */
left always_events ::=      always_event |
    always_events TOK_OR always_event |
    always_events ',' always_event
always_event ::=    TOK_POSEDGE expr |  TOK_NEGEDGE expr  | expr
opt_label ::=   ':' TOK_ID  |   /* empty */
assert_ ::= TOK_ASSERT '(' expr ')' ';'
simple_behavioral_stmt ::=  lvalue '=' expr  |  lvalue OP_LE expr
// this production creates the obligatory if-else shift/reduce conflict
behavioral_stmt ::= defattr | assert_ | wire_decl | simple_behavioral_stmt ';' |
    hierarchical_id attr
     opt_arg_list ';' |
    attr TOK_BEGIN opt_label behavioral_stmt_list TOK_END opt_label |
    attr TOK_FOR '(' simple_behavioral_stmt ';' expr ';' simple_behavioral_stmt ')'
     behavioral_stmt |
    attr TOK_IF '(' expr ')'
     behavioral_stmt optional_else |
    attr case_type '(' expr ')' opt_synopsys_attr case_body TOK_ENDCASE ;
case_type ::=   TOK_CASE |  TOK_CASEX | TOK_CASEZ
left opt_synopsys_attr ::= opt_synopsys_attr TOK_SYNOPSYS_FULL_CASE   | opt_synopsys_attr
TOK_SYNOPSYS_PARALLEL_CASE |    /* empty */
behavioral_stmt_opt ::= behavioral_stmt |   ';'
left  behavioral_stmt_list ::=  behavioral_stmt_list behavioral_stmt |  /* empty */
optional_else ::=   TOK_ELSE  behavioral_stmt | /* empty */
left  case_body ::= case_body case_item |   /* empty */
case_item ::= case_select  behavioral_stmt_opt
left gen_case_body ::= gen_case_body gen_case_item |
    /* empty */;
gen_case_item ::=case_select  gen_stmt_or_null
case_select ::= case_expr_list ':' |    TOK_DEFAULT
left  case_expr_list ::=    TOK_DEFAULT  |  expr  | case_expr_list ',' expr
rvalue ::= hierarchical_id '[' expr ']' '.' rvalue   |
    hierarchical_id range |
    hierarchical_id non_opt_range non_opt_range
lvalue ::=  rvalue  |   '{' lvalue_concat_list '}'
lvalue_concat_list ::=  expr  | expr ','
opt_arg_list ::=    '(' arg_list optional_comma ')' |   /* empty */
left  arg_list ::=  arg_list2 | /* empty */
left  arg_list2 ::= single_arg |    arg_list ',' single_arg
single_arg ::=  expr
left  module_gen_body ::=   module_gen_body gen_stmt |  /* empty */
// this production creates the obligatory if-else shift/reduce conflict
gen_stmt ::=    TOK_FOR '(' simple_behavioral_stmt ';' expr simple_behavioral_stmt ')' gen_stmt_block |
    TOK_IF '(' expr ')' gen_stmt_block opt_gen_else |
    case_type '(' expr ')' gen_case_body TOK_ENDCASE |
    TOK_BEGIN opt_label module_gen_body TOK_END opt_label |
    module_body_stmt
gen_stmt_block ::= gen_stmt
gen_stmt_or_null ::=    gen_stmt_block | ';'
                                4
opt_gen_else ::=    TOK_ELSE gen_stmt_or_null | /* empty */
expr ::=    basic_expr |
    basic_expr '?' attr expr ':' expr
left basic_expr ::=
    rvalue |
    '(' expr ')' TOK_CONST |
    hierarchical_id TOK_CONST |
    TOK_CONST |
    TOK_STRING |
    hierarchical_id attr '(' arg_list optional_comma ')'   |
    TOK_TO_SIGNED attr '(' expr ')' |
    TOK_TO_UNSIGNED attr '(' expr ')' |
    '(' expr ')' |
    '{' concat_list '}' |
    '{' expr '{' expr '}' '}' |
    '~' attr basic_expr   |
    basic_expr '&' attr basic_expr |
    basic_expr '|' attr basic_expr |
    basic_expr '^' attr basic_expr |
    basic_expr OP_XNOR attr basic_expr |
    '&' attr basic_expr   |
    OP_NAND attr basic_expr |
    '|' attr basic_expr   |
    OP_NOR attr basic_expr   |
    '^' attr basic_expr   |
    OP_XNOR attr basic_expr   |
    basic_expr OP_SHL attr basic_expr |
    basic_expr OP_SHR attr basic_expr |
    basic_expr OP_SSHL attr basic_expr |
    basic_expr OP_SSHR attr basic_expr |
    basic_expr '<' attr basic_expr |
    basic_expr OP_LE attr basic_expr |
    basic_expr OP_EQ attr basic_expr |
    basic_expr OP_NE attr basic_expr |
    basic_expr OP_EQX attr basic_expr |
    basic_expr OP_NEX attr basic_expr |
    basic_expr OP_GE attr basic_expr |
    basic_expr '>' attr basic_expr |
    basic_expr '+' attr basic_expr |
    basic_expr '-' attr basic_expr |
    basic_expr '*' attr basic_expr |
    basic_expr '/' attr basic_expr |
    basic_expr '%' attr basic_expr |
    basic_expr OP_POW attr basic_expr |
    '+' attr basic_expr   |
    '-' attr basic_expr   |
    basic_expr OP_LAND attr basic_expr |
    basic_expr OP_LOR attr basic_expr |
    '!' attr basic_expr
concat_list ::= expr  | expr ',' concat_list
