/*
 * (C) Copyright  2014 Aplus Logic Inc (http://www.apluslogicinc.com/)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *      XR.M
 */
{
  // psiImplUtilClass="com.verilogplugin.util.VerilogPsiImplUtil"
  parserClass="com.verilogplugin.parser.VerilogParser"
  parserUtilClass="com.verilogplugin.parser.VerilogParserUtil"
  // parserUtilClass="com.verilogplugin.parser.VerilogParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Verilog"
  psiImplClassSuffix="Impl"
  psiPackage="com.verilogplugin.psi"
  psiImplPackage="com.verilogplugin.psi.impl"

  elementTypeHolderClass="com.verilogplugin.psi.VerilogTokenTypes"
  elementTypePrefix = ""
  elementTypeClass="com.verilogplugin.psi.VerilogElementType"
  tokenTypeClass="com.verilogplugin.psi.VerilogElementType"
  tokenTypeClass="com.verilogplugin.psi.VerilogTokenTypes"
  psiImplUtilClass="com.verilogplugin.psi.impl.VerilogPsiImplUtil"

  generateFirstCheck=50
/**
 * Tokens
 * http://hackage.haskell.org/package/verilog-0.0.2/docs/Language-Verilog-Tokens.html
 * http://hackage.haskell.org/package/verilog-0.0.2/docs/src/Language-Verilog-Parse.html
*/

  tokens = [
    TOK_MODULE=                      'module'
    TOK_ENDMODULE=                   'endmodule'
    TOK_FUNCTION=                    'function'
    TOK_ENDFUNCTION=                 'endfunction'
    TOK_TASK=                        'task'
    TOK_ENDTASK=                     'endtask'
    TOK_PARAMETER=                   'parameter'
    TOK_LOCALPARAM=                  'localparam'
    TOK_DEFPARAM=                    'defparam'
    TOK_ASSIGN=                      'assign'
    TOK_ALWAYS=                      'always'
    TOK_INITIAL=                     'initial'
    TOK_BEGIN=                       'begin'
    TOK_END=                         'end'
    TOK_IF=                          'if'
    TOK_ELSE=                        'else'
    TOK_FOR=                         'for'
    TOK_POSEDGE=                     'posedge'
    TOK_NEGEDGE=                     'negedge'
    TOK_OR=                          'or'
    TOK_CASE=                        'case'
    TOK_CASEX=                       'casex'
    TOK_CASEZ=                       'casez'
    TOK_ENDCASE=                     'endcase'
    TOK_DEFAULT=                     'default'
    TOK_GENERATE=                    'generate'
    TOK_ENDGENERATE=                 'endgenerate'

    //TOK_ASSERT=                       "assert"([ \t\r\n]+"property")?

    TOK_INPUT=                        'input'
    TOK_OUTPUT=                       'output'
    TOK_INOUT=                        'inout'
    TOK_WIRE=                         'wire'
    TOK_REG=                          'reg'
    TOK_INTEGER=                      'integer'
    TOK_SIGNED=                       'signed'
    TOK_GENVAR=                       'genvar'

    // TOK_CONST=

    // TOK_STRING =

    TOK_PRIMITIVE = 'regexp:and|nand|or|nor|xor|xnor|not|buf|bufif0|bufif1|notif0|notif1'


    TOK_SUPPLY0 = 'supply0'
    TOK_SUPPLY1 = 'supply1'

    //IDENTIFIER = "$"(display|time|stop|finish)

    TOK_TO_SIGNED = '$signed'
    TOK_TO_UNSIGNED = '$unsigned'

    //IDENTIFIER = [a-zA-Z_$][a-zA-Z0-9_$]*

    // SYNOPSYS_TRANSLATE_OFF

    // SYNOPSYS_FLAGS



    ATTR_BEGIN               ='(*'
    ATTR_END                 ='*)'

    DEFATTR_BEGIN            ='{*'
    DEFATTR_END              ='*}'

    OP_POW                   ='**'
    OP_LOR                   ='||'
    OP_LAND                  ='&&'
    OP_EQ                    ='=='
    OP_NE                    ='!='
    OP_LE                    ='<='
    OP_GE                    ='>='

    OP_EQX                   ='==='
    OP_NEX                   ='!=='

    OP_NAND                  ='~&'
    OP_NOR                   ='~|'
    OP_XNOR                  ='~^'
    OP_XNOR                  ='^~'

    OP_SHL                   ='<<'
    OP_SHR                   ='>>'
    OP_SSHL                  ='<<<'
    OP_SSHR                  ='>>>'

    TOK_POS_INDEXED         ='+:'
    TOK_NEG_INDEXED         ='-:'

    TOK_INTEGER             ='regexp:[0-9]+'

    IDENTIFIER              = 'regexp:\p{Alpha}\w*'
    //'/*' { BEGIN(COMMENT)=
    //<COMMENT>.    /* ignore comment body */
    //<COMMENT>\n   /* ignore comment body */
    //<COMMENT>'*/' { BEGIN(0)=
    //
    //[ \t\r\n]               /* ignore whitespaces */
    //\\[\r\n]                /* ignore continuation sequence */
    //'//'[^\r\n]*            /* ignore one-line comments */
    //'#"[$a-zA-Z_0-9\.]+     /* ignore simulation timings */





      ]
  extends(".*_expr")=expr               // make AST for literal one level deep: FileNode/LiteralExpr
}

input  ::=  module  input |  defattr input | /* empty */
attr   ::=  attr_opt
//left  attr_opt  ::= attr_opt ATTR_BEGIN opt_attr_list ATTR_END |    /* empty */
attr_opt  ::=  ATTR_BEGIN opt_attr_list ATTR_END attr_opt_rest | /* empty */
attr_opt_rest ::= ATTR_BEGIN opt_attr_list ATTR_END attr_opt_rest |    /* empty */
defattr  ::= DEFATTR_BEGIN  opt_attr_list  DEFATTR_END;
opt_attr_list ::=   attr_list | /* empty */
// left  attr_list ::= attr_assign |   attr_list ',' attr_assign;
// http://en.wikipedia.org/wiki/Left_recursion#Removing_immediate_left_recursion
attr_list ::= attr_assign attr_list_rest | /* empty */
attr_list_rest ::=',' attr_list| /* empty */

attr_assign ::= hierarchical_id  |  hierarchical_id '=' expr
 hierarchical_id ::=   IDENTIFIER  |   IDENTIFIER  '.' hierarchical_id
// see nonStrictID
id ::= IDENTIFIER

module ::=  attr TOK_MODULE IDENTIFIER  module_para_opt module_args_opt ';' module_body TOK_ENDMODULE { recoverWhile="top_recover" pin=6}

top_recover ::= !("module"|DEFATTR_BEGIN|ATTR_BEGIN)

private module_para_opt ::= '#' '(' module_para_list ')' | /* empty */

private module_para_list ::=    single_module_para |    single_module_para ',' module_para_list |   /* empty */

private single_module_para ::=  TOK_PARAMETER  param_signed param_integer param_range single_param_decl

private module_args_opt ::= '(' ')' | '(' module_args  ')' | /* empty */


// module_args ::=   module_arg  | module_args ',' module_arg
module_args ::= module_arg module_args_rest
module_args_rest ::= ',' module_args| ',' | /* empty */

//{ recoverWhile="arg_recover" }
//private arg_recover ::= !(IDENTIFIER | ',' | ')' )

optional_comma ::=  ',' | /* empty */

module_arg_opt_assignment ::=   '=' expr  | /* empty */

module_arg ::=    IDENTIFIER module_arg_opt_assignment |    attr wire_type range IDENTIFIER module_arg_opt_assignment;

wire_type ::=    wire_type_token_list
// left  wire_type_token_list  ::= wire_type_token | wire_type_token_list wire_type_token
wire_type_token_list  ::= wire_type_token  wire_type_token_list_rest
wire_type_token_list_rest ::= wire_type_token |/* empty */

wire_type_token ::= TOK_INPUT | TOK_OUTPUT  | TOK_INOUT  |TOK_WIRE |TOK_REG |TOK_INTEGER | TOK_GENVAR |  TOK_SIGNED

non_opt_range ::=
    '[' expr ':' expr ']' |
    '[' expr TOK_POS_INDEXED expr ']'  |
    '[' expr TOK_NEG_INDEXED expr ']'  |
    '[' expr ']'
range ::=   non_opt_range  |    /* empty */
range_or_integer ::=  TOK_INTEGER | range  |  /* empty */
// left  module_body ::=   module_body module_body_stmt |  /* empty */
module_body ::= module_body_stmt module_body_rest
module_body_rest ::= module_body_stmt module_body_rest | /* empty */
module_body_stmt ::=    task_func_decl | param_decl | localparam_decl | defparam_decl | wire_decl | assign_stmt
| cell_stmt |
    always_stmt | TOK_GENERATE module_gen_body TOK_ENDGENERATE | defattr | assert_
task_func_decl ::= TOK_TASK IDENTIFIER ';' task_func_body TOK_ENDTASK |
    TOK_FUNCTION opt_signed range_or_integer IDENTIFIER ';' task_func_body TOK_ENDFUNCTION
opt_signed ::=  TOK_SIGNED  |   /* empty */
task_func_body ::=     behavioral_stmt task_func_body_rest |    /* empty */
task_func_body_rest ::=  task_func_body | /* empty */
param_signed ::=    TOK_SIGNED | /* empty */
param_integer ::=   TOK_INTEGER  | /* empty */
                                                                                            2
param_range ::= range ;
param_decl ::=  TOK_PARAMETER  param_signed param_integer param_range param_decl_list ';'
localparam_decl ::= TOK_LOCALPARAM  param_signed param_integer param_range param_decl_list ';'
param_decl_list ::=   single_param_decl |  single_param_decl ',' param_decl_list
single_param_decl ::=   IDENTIFIER '=' expr
defparam_decl ::=   TOK_DEFPARAM defparam_decl_list ';'
defparam_decl_list ::=    single_defparam_decl |  single_defparam_decl ',' defparam_decl_list
single_defparam_decl ::=    range hierarchical_id '=' expr

wire_decl ::=   attr wire_type range  wire_name_list ';'  | attr TOK_SUPPLY0 IDENTIFIER ';'  |
    attr TOK_SUPPLY1 IDENTIFIER ';'

wire_name_list ::=    wire_name_and_opt_assign |  wire_name_and_opt_assign ',' wire_name_list
wire_name_and_opt_assign ::=    wire_name | wire_name '=' expr
wire_name ::=   IDENTIFIER range
assign_stmt ::= TOK_ASSIGN assign_expr_list ';';

assign_expr_list ::=  assign_expr |  assign_expr ',' assign_expr_list ;
assign_expr ::= expr '=' expr
cell_stmt ::=   attr IDENTIFIER  cell_parameter_list_opt cell_list ';'  |   attr tok_prim_wrapper  prim_list ';'
tok_prim_wrapper ::=    TOK_PRIMITIVE  |    TOK_OR
// left  cell_list ::= single_cell |   cell_list ',' single_cell
cell_list ::= single_cell |  single_cell  ',' cell_list
single_cell ::= IDENTIFIER  '(' cell_port_list ')'
prim_list ::= single_prim |   single_prim ',' prim_list
single_prim ::= single_cell |   /* no name */ '(' cell_port_list ')'
cell_parameter_list_opt ::= '#' '(' cell_parameter_list ')' | /* empty */
cell_parameter_list ::=    /* empty */ |    cell_parameter |    cell_parameter ',' cell_parameter_list
cell_parameter ::=  expr  | '.' IDENTIFIER '(' expr ')'
cell_port_list ::=  cell_port | cell_port ',' cell_port_list |  /* empty */ ','  cell_port_list | /* empty */
cell_port ::=   expr |
    '.' IDENTIFIER '(' expr ')'  |
    '.' IDENTIFIER '(' ')'
always_stmt ::= attr TOK_ALWAYS always_cond   behavioral_stmt  |
    attr TOK_INITIAL behavioral_stmt
always_cond ::= '@' '(' always_events ')' |
    '@' '(' '*' ')' |
    '@' ATTR_BEGIN ')' |
    '@' '(' ATTR_END |
    '@' '*' |   /* empty */
// http://mdaines.github.io/grammophone/
always_events ::=      always_event |
    always_event TOK_OR always_events |
    always_event ',' always_events
always_event ::=    TOK_POSEDGE expr |  TOK_NEGEDGE expr  | expr
opt_label ::=   ':' IDENTIFIER  |   /* empty */
assert_ ::= TOK_ASSERT '(' expr ')' ';'
simple_behavioral_stmt ::=  lvalue '=' expr  |  lvalue OP_LE expr
// this production creates the obligatory if-else shift/reduce conflict
behavioral_stmt ::= defattr | assert_ | wire_decl | simple_behavioral_stmt ';' |
    hierarchical_id attr
     opt_arg_list ';' |
    attr TOK_BEGIN opt_label behavioral_stmt_list TOK_END opt_label |
    attr TOK_FOR '(' simple_behavioral_stmt ';' expr ';' simple_behavioral_stmt ')'
     behavioral_stmt |
    attr TOK_IF '(' expr ')'
     behavioral_stmt optional_else |
    attr case_type '(' expr ')' opt_synopsys_attr case_body TOK_ENDCASE ;
case_type ::=   TOK_CASE |  TOK_CASEX | TOK_CASEZ
opt_synopsys_attr ::=
                    TOK_SYNOPSYS_FULL_CASE  opt_synopsys_attr |
                    TOK_SYNOPSYS_PARALLEL_CASE opt_synopsys_attr |    /* empty */
behavioral_stmt_opt ::= behavioral_stmt |   ';'
behavioral_stmt_list ::=   behavioral_stmt behavioral_stmt_list|  /* empty */
optional_else ::=   TOK_ELSE  behavioral_stmt | /* empty */
case_body ::=  case_item case_body|   /* empty */
case_item ::= case_select  behavioral_stmt_opt
gen_case_body ::=  gen_case_item gen_case_body |
    /* empty */;
gen_case_item ::=case_select  gen_stmt_or_null
case_select ::= case_expr_list ':' |    TOK_DEFAULT
case_expr_list ::=    TOK_DEFAULT  |  expr  | expr ',' case_expr_list
rvalue ::= hierarchical_id '[' expr ']' '.' rvalue   |
    hierarchical_id range |
    hierarchical_id non_opt_range non_opt_range
lvalue ::=  rvalue  |   '{' lvalue_concat_list '}'
lvalue_concat_list ::=  expr  | expr ','
opt_arg_list ::=    '(' arg_list optional_comma ')' |   /* empty */
arg_list ::=  arg_list2 | /* empty */
arg_list2 ::= single_arg |    single_arg ',' arg_list

single_arg ::=  expr
module_gen_body ::=    gen_stmt module_gen_body |  /* empty */
// this production creates the obligatory if-else shift/reduce conflict
gen_stmt ::=    TOK_FOR '(' simple_behavioral_stmt ';' expr simple_behavioral_stmt ')' gen_stmt_block |
    TOK_IF '(' expr ')' gen_stmt_block opt_gen_else |
    case_type '(' expr ')' gen_case_body TOK_ENDCASE |
    TOK_BEGIN opt_label module_gen_body TOK_END opt_label |
    module_body_stmt
gen_stmt_block ::= gen_stmt
gen_stmt_or_null ::=    gen_stmt_block | ';'
                                4
opt_gen_else ::=    TOK_ELSE gen_stmt_or_null | /* empty */
expr ::=    basic_expr |
    basic_expr '?' attr expr ':' expr

//TODO: remove left recoursion
left basic_expr ::=
    rvalue |
    '(' expr ')' TOK_CONST |
    hierarchical_id TOK_CONST |
    TOK_CONST |
    TOK_STRING |
    hierarchical_id attr '(' arg_list optional_comma ')'   |
    TOK_TO_SIGNED attr '(' expr ')' |
    TOK_TO_UNSIGNED attr '(' expr ')' |
    '(' expr ')' |
    '{' concat_list '}' |
    '{' expr '{' expr '}' '}' |
    '~' attr basic_expr   |
    basic_expr '&' attr basic_expr |
    basic_expr '|' attr basic_expr |
    basic_expr '^' attr basic_expr |
    basic_expr OP_XNOR attr basic_expr |
    '&' attr basic_expr   |
    OP_NAND attr basic_expr |
    '|' attr basic_expr   |
    OP_NOR attr basic_expr   |
    '^' attr basic_expr   |
    OP_XNOR attr basic_expr   |
    basic_expr OP_SHL attr basic_expr |
    basic_expr OP_SHR attr basic_expr |
    basic_expr OP_SSHL attr basic_expr |
    basic_expr OP_SSHR attr basic_expr |
    basic_expr '<' attr basic_expr |
    basic_expr OP_LE attr basic_expr |
    basic_expr OP_EQ attr basic_expr |
    basic_expr OP_NE attr basic_expr |
    basic_expr OP_EQX attr basic_expr |
    basic_expr OP_NEX attr basic_expr |
    basic_expr OP_GE attr basic_expr |
    basic_expr '>' attr basic_expr |
    basic_expr '+' attr basic_expr |
    basic_expr '-' attr basic_expr |
    basic_expr '*' attr basic_expr |
    basic_expr '/' attr basic_expr |
    basic_expr '%' attr basic_expr |
    basic_expr OP_POW attr basic_expr |
    '+' attr basic_expr   |
    '-' attr basic_expr   |
    basic_expr OP_LAND attr basic_expr |
    basic_expr OP_LOR attr basic_expr |
    '!' attr basic_expr
concat_list ::= expr  | expr ',' concat_list
