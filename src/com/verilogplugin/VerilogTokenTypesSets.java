/*
 * (C) Copyright  2014 @max6cn
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *      @max6cn
 */

package com.verilogplugin;

import com.intellij.lang.*;
import com.intellij.psi.PsiFile;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.*;
import com.intellij.util.diff.FlyweightCapableTreeStructure;
import com.verilogplugin.psi.VerilogElementType;
import static com.intellij.lang.parser.GeneratedParserUtilBase.*;
import static com.intellij.lang.parser.GeneratedParserUtilBase.TRUE_CONDITION;
import static com.verilogplugin.psi.VerilogTokenTypes.*;

/**
 * Created by mark on 3/24/14.
 */
public interface VerilogTokenTypesSets {
    IFileElementType VERILOG_FILE = new IFileElementType("DARTFILE", VerilogLanguage.INSTANCE);

    IElementType WHITE_SPACE = TokenType.WHITE_SPACE;
    IElementType BAD_CHARACTER = TokenType.BAD_CHARACTER;

    // VerilogLexer returns multiline comments as a single MULTI_LINE_COMMENT or MULTI_LINE_DOC_COMMENT
    // VerilogDocLexer splits MULTI_LINE_DOC_COMMENT in tokens

    IElementType MULTI_LINE_COMMENT_START = new VerilogElementType("MULTI_LINE_COMMENT_START"); // can't appear in PSI because merged into MULTI_LINE_COMMENT
    IElementType MULTI_LINE_DOC_COMMENT_START = new VerilogElementType("MULTI_LINE_DOC_COMMENT_START");
    IElementType MULTI_LINE_COMMENT_BODY = new VerilogElementType("MULTI_LINE_COMMENT_BODY");
    IElementType DOC_COMMENT_LEADING_ASTERISK = new VerilogElementType("DOC_COMMENT_LEADING_ASTERISK");
    IElementType MULTI_LINE_COMMENT_END = new VerilogElementType("MULTI_LINE_COMMENT_END");

    IElementType SINGLE_LINE_COMMENT = new VerilogElementType("SINGLE_LINE_COMMENT");
    IElementType SINGLE_LINE_DOC_COMMENT = new VerilogElementType("SINGLE_LINE_DOC_COMMENT");
    IElementType MULTI_LINE_COMMENT = new VerilogElementType("MULTI_LINE_COMMENT");
   // IElementType MULTI_LINE_DOC_COMMENT = new VerilogDocCommentElementType();
    IElementType NUMBER = new VerilogElementType("NUMBER");
    //IElementType IDENTIFIER = new VerilogElementType("IDENTIFIER");
    //IElementType STRING = new VerilogElementType("STRING");

    TokenSet STRINGS = TokenSet.create(STRING);
    TokenSet WHITE_SPACES = TokenSet.create(WHITE_SPACE);

    TokenSet RESERVED_WORDS = TokenSet.create(ALIAS, ALWAYS, ALWAYS_COMB, ALWAYS_FF, ALWAYS_LATCH, AND, ASSERT, ASSIGN, ASSUME, AUTOMATIC,
 BEFORE, BEGIN, BIND, BINS, BINSOF, BIT, BREAK, BUF, BUFIF0, BUFIF1, BYTE, CASE, CASEX, CASEZ,
 CELL, CHANDLE, CLASS, CLOCKING, CMOS, CONFIG, CONST, CONSTRAINT, CONTEXT, CONTINUE, COVER, COVERGROUP,
 COVERPOINT, CROSS, DEASSIGN, DEFAULT, DEFPARAM, DESIGN, DISABLE, DIST, DO, EDGE, ELSE, END, ENDCASE,
 ENDCLASS, ENDCLOCKING, ENDCONFIG, ENDFUNCTION, ENDGENERATE, ENDGROUP, ENDINTERFACE, ENDMODULE, ENDPACKAGE,
 ENDPRIMITIVE, ENDPROGRAM, ENDPROPERTY, ENDSPECIFY, ENDSEQUENCE, ENDTABLE, ENDTASK, ENUM, EVENT, EXPECT,
 EXPORT, EXTENDS, EXTERN, FINAL, FIRST_MATCH, FOR, FORCE, FOREACH, FOREVER, FORK, FORKJOIN, FUNCTION,
 FUNCTION_PROTOTYPE, GENERATE, GENVAR, HIGHZ0, HIGHZ1, IF, IFF, IFNONE, IGNORE_BINS, ILLEGAL_BINS, IMPORT,
 INCDIR, INCLUDE, INITIAL, INOUT, INPUT, INSIDE, INSTANCE, INT, INTEGER, INTERFACE, INTERSECT, JOIN,
 JOIN_ANY, JOIN_NONE, LARGE, LIBLIST, LIBRARY, LOCAL, LOCALPARAM, LOGIC, LONGINT, MACROMODULE, MATCHES, MEDIUM,
 MODPORT, MODULE, NAND, NEGEDGE, NEW, NMOS, NOR, NOSHOWCANCELLED, NOT, NOTIF0, NOTIF1, NULL, OPTION, OR,
 OUTPUT, PACKAGE, PACKED, PARAMETER, PATHPULSE_DOLLAR, PMOS, POSEDGE, PRIMITIVE, PRIORITY, PROGRAM,
 PROPERTY, PROTECTED, PULL0, PULL1, PULLDOWN, PULLUP, PULSESTYLE_ONEVENT, PULSESTYLE_ONDETECT, PURE, RAND,
 RANDC, RANDCASE, RANDSEQUENCE, RCMOS, REAL, REALTIME, REF, REG, RELEASE, REPEAT, RETURN, RNMOS, RPMOS, RTRAN,
 RTRANIF0, RTRANIF1, SCALARED, SEQUENCE, SHORTINT, SHORTREAL, SHOWCANCELLED, SIGNED, SMALL, SOLVE, SPECIFY,
 SPECPARAM, STATIC, STRENGTH0, STRENGTH1, STRING, STRONG0, STRONG1, STRUCT, SUPER, SUPPLY0, SUPPLY1, TABLE,
 TAGGED, TASK, THIS, THROUGHOUT, TIME, TIMEPRECISION, TIMEUNIT, TRAN, TRANIF0, TRANIF1, TRI, TRI0,
 TRI1, TRIAND, TRIOR, TRIREG, TYPE, TYPEDEF, TYPE_OPTION, UNION, UNIQUE, UNSIGNED, USE, VAR, VECTORED,
 VIRTUAL, VOID, WAIT, WAIT_ORDER, WAND, WEAK0, WEAK1, WHILE, WILDCARD, WIRE, WITH, WITHIN, WOR, XNOR,
 XOR, ALIAS, ALWAYS, ALWAYS_COMB, ALWAYS_FF, ALWAYS_LATCH, AND, ASSERT, ASSIGN, ASSUME, AUTOMATIC,
 BEFORE, BEGIN, BIND, BINS, BINSOF, BIT, BREAK, BUF, BUFIF0, BUFIF1, BYTE, CASE, CASEX, CASEZ,
 CELL, CHANDLE, CLASS, CLOCKING, CMOS, CONFIG, CONST, CONSTRAINT, CONTEXT, CONTINUE, COVER, COVERGROUP,
 COVERPOINT, CROSS, DEASSIGN, DEFAULT, DEFPARAM, DESIGN, DISABLE, DIST, DO, EDGE, ELSE, END, ENDCASE,
 ENDCLASS, ENDCLOCKING, ENDCONFIG, ENDFUNCTION, ENDGENERATE, ENDGROUP, ENDINTERFACE, ENDMODULE, ENDPACKAGE,
 ENDPRIMITIVE, ENDPROGRAM, ENDPROPERTY, ENDSPECIFY, ENDSEQUENCE, ENDTABLE, ENDTASK, ENUM, EVENT, EXPECT,
 EXPORT, EXTENDS, EXTERN, FINAL, FIRST_MATCH, FOR, FORCE, FOREACH, FOREVER, FORK, FORKJOIN, FUNCTION,
 FUNCTION_PROTOTYPE, GENERATE, GENVAR, HIGHZ0, HIGHZ1, IF, IFF, IFNONE, IGNORE_BINS, ILLEGAL_BINS, IMPORT,
 INCDIR, INCLUDE, INITIAL, INOUT, INPUT, INSIDE, INSTANCE, INT, INTEGER, INTERFACE, INTERSECT, JOIN,
 JOIN_ANY, JOIN_NONE, LARGE, LIBLIST, LIBRARY, LOCAL, LOCALPARAM, LOGIC, LONGINT, MACROMODULE, MATCHES, MEDIUM,
 MODPORT, MODULE, NAND, NEGEDGE, NEW, NMOS, NOR, NOSHOWCANCELLED, NOT, NOTIF0, NOTIF1, NULL, OPTION, OR, OUTPUT,
 PACKAGE, PACKED, PARAMETER, PATHPULSE_DOLLAR, PMOS, POSEDGE, PRIMITIVE, PRIORITY, PROGRAM, PROPERTY, PROTECTED,
 PULL0, PULL1, PULLDOWN, PULLUP, PULSESTYLE_ONEVENT, PULSESTYLE_ONDETECT, PURE, RAND, RANDC, RANDCASE,
 RANDSEQUENCE, RCMOS, REAL, REALTIME, REF, REG, RELEASE, REPEAT, RETURN, RNMOS, RPMOS, RTRAN, RTRANIF0, RTRANIF1,
 SCALARED, SEQUENCE, SHORTINT, SHORTREAL, SHOWCANCELLED, SIGNED, SMALL, SOLVE, SPECIFY, SPECPARAM, STATIC,
 STRENGTH0, STRENGTH1, STRING, STRONG0, STRONG1, STRUCT, SUPER, SUPPLY0, SUPPLY1, TABLE, TAGGED, TASK, THIS,
 THROUGHOUT, TIME, TIMEPRECISION, TIMEUNIT, TRAN, TRANIF0, TRANIF1, TRI, TRI0, TRI1, TRIAND, TRIOR, TRIREG,
 TYPE, TYPEDEF, TYPE_OPTION, UNION, UNIQUE, UNSIGNED, USE, VAR, VECTORED, VIRTUAL, VOID, WAIT, WAIT_ORDER,
 WAND, WEAK0, WEAK1, WHILE, WILDCARD, WIRE, WITH, WITHIN, WOR, XNOR, XOR);



    TokenSet BUILT_IN_IDENTIFIERS = TokenSet.create();

    TokenSet OPERATORS = TokenSet.create(LT,GT);

    TokenSet ASSIGNMENT_OPERATORS = TokenSet.create(EQ);

    TokenSet BINARY_EXPRESSIONS = TokenSet.create( );

    TokenSet BINARY_OPERATORS = TokenSet.create(AMP,BAR,HAT );

    TokenSet LOGIC_OPERATORS = TokenSet.create( AMP_AMP );

    TokenSet UNARY_OPERATORS = TokenSet.create( TILDY,BANG);
    TokenSet BITWISE_OPERATORS = TokenSet.create();
    TokenSet FUNCTION_DEFINITION = TokenSet.create( );

    TokenSet COMMENTS = TokenSet.create(SINGLE_LINE_COMMENT, SINGLE_LINE_DOC_COMMENT, MULTI_LINE_COMMENT);
    TokenSet DOC_COMMENT_CONTENTS =
            TokenSet.create(MULTI_LINE_DOC_COMMENT_START, MULTI_LINE_COMMENT_BODY, DOC_COMMENT_LEADING_ASTERISK, MULTI_LINE_COMMENT_END);

    TokenSet BLOCKS = TokenSet.create( );

    TokenSet DECLARATIONS = TokenSet.create( );


}
